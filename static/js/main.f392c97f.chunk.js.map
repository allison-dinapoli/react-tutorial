{"version":3,"sources":["Timer.js","serviceWorker.js","index.js"],"names":["Timer","props","timer","state","currentMinutes","currentSeconds","countdownMinutes","countdownSeconds","timerActive","timerCompleted","startTimer","bind","countDown","updateMinutes","updateSeconds","this","minutes","seconds","setState","setInterval","clearInterval","event","target","value","style","textAlign","body","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOA6FeA,E,kDA1FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,EACb,EAAKC,MAAQ,CACXC,eAAgB,EAChBC,eAAgB,EAChBC,iBAAkB,EAClBC,iBAAkB,EAClBC,aAAa,EACbC,gBAAgB,GAGlB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBAhBN,E,yDAoBf,GAAkB,GAAdI,KAAKb,OAAwC,GAA1Ba,KAAKZ,MAAMK,cAAyBO,KAAKZ,MAAMG,iBAAmB,GAAKS,KAAKZ,MAAMI,iBAAmB,GAAI,CAC9H,IAAIS,EAAUD,KAAKZ,MAAMG,iBACrBW,EAAUF,KAAKZ,MAAMI,iBACzBQ,KAAKG,SAAS,CAACV,aAAa,EAAMJ,eAAgBY,EAASX,eAAgBY,EAASR,gBAAgB,IACpGM,KAAKb,MAAQiB,YAAYJ,KAAKH,UAAW,Q,kCAK3C,IAAIK,EAAUF,KAAKZ,MAAME,eAAiB,EACtCW,EAAUD,KAAKZ,MAAMC,eACrBa,EAAU,IACZA,EAAU,GACVD,GAAoB,GAEtBD,KAAKG,SAAS,CAACb,eAAgBY,EAASb,eAAgBY,IACpDC,GAAW,GAAKD,GAAW,IAC7BI,cAAcL,KAAKb,OACnBa,KAAKG,SAAS,CAACV,aAAa,EAAOC,gBAAgB,IACnDM,KAAKb,MAAQ,K,oCAIHmB,GACZN,KAAKG,SAAS,CAACZ,iBAAkBe,EAAMC,OAAOC,U,oCAGlCF,GACZN,KAAKG,SAAS,CAACX,iBAAkBc,EAAMC,OAAOC,U,+BAI9C,IAAId,EAAiB,GAEjBM,KAAKZ,MAAMM,iBACbA,EAAiB,yBAAKe,MAAO,CAACC,UAAW,WACtB,iDACA,mDAIrB,IAAIC,EAAO,yBAAKF,MAAO,CAACC,UAAW,WACtB,4BAAKV,KAAKZ,MAAMC,eAAhB,kBAA+CW,KAAKZ,MAAME,eAA1D,oBACA,6CAAmBU,KAAKZ,MAAMG,iBAA9B,gBAA6DS,KAAKZ,MAAMI,iBAAxE,cAcb,OAXKQ,KAAKZ,MAAMK,cACdkB,EAAO,yBAAKF,MAAO,CAACC,UAAW,WACtB,2BAAOE,KAAK,SAASC,SAAUb,KAAKF,cAAeU,MAAOR,KAAKZ,MAAMG,mBADvE,gBAEE,6BACA,2BAAOqB,KAAK,SAASC,SAAUb,KAAKD,cAAeS,MAAOR,KAAKZ,MAAMI,mBAHvE,gBAIE,6BACA,6BACA,4BAAQsB,QAASd,KAAKL,YAAtB,gBAKT,yBAAKc,MAAO,CAACC,UAAU,WACrB,6BACA,sDACA,6BACA,6BACChB,EACAiB,O,GArFOI,aCUAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f392c97f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props); \r\n        \r\n        this.timer = 0; \r\n        this.state = {\r\n          currentMinutes: 0, \r\n          currentSeconds: 0,\r\n          countdownMinutes: 0,\r\n          countdownSeconds: 0, \r\n          timerActive: false, \r\n          timerCompleted: false\r\n        }; \r\n    \r\n        this.startTimer = this.startTimer.bind(this); \r\n        this.countDown = this.countDown.bind(this);\r\n        this.updateMinutes = this.updateMinutes.bind(this); \r\n        this.updateSeconds = this.updateSeconds.bind(this); \r\n      }\r\n    \r\n      startTimer() {\r\n        if (this.timer == 0 && this.state.timerActive == false && (this.state.countdownMinutes > 0 || this.state.countdownSeconds > 0)) {\r\n          let minutes = this.state.countdownMinutes; \r\n          let seconds = this.state.countdownSeconds; \r\n          this.setState({timerActive: true, currentMinutes: minutes, currentSeconds: seconds, timerCompleted: false}); \r\n          this.timer = setInterval(this.countDown, 1000);\r\n        }\r\n      }\r\n    \r\n      countDown() {\r\n        var seconds = this.state.currentSeconds - 1;\r\n        var minutes = this.state.currentMinutes;\r\n        if (seconds < 0) {\r\n          seconds = 59; \r\n          minutes = minutes - 1; \r\n        }\r\n        this.setState({currentSeconds: seconds, currentMinutes: minutes});\r\n        if (seconds <= 0 && minutes <= 0) {\r\n          clearInterval(this.timer); \r\n          this.setState({timerActive: false, timerCompleted: true});\r\n          this.timer = 0; \r\n        }\r\n      }\r\n    \r\n      updateMinutes(event) {\r\n        this.setState({countdownMinutes: event.target.value});\r\n      }\r\n    \r\n      updateSeconds(event) {\r\n        this.setState({countdownSeconds: event.target.value});\r\n      }\r\n    \r\n      render() {\r\n        var timerCompleted = \"\"; \r\n        \r\n        if (this.state.timerCompleted) {\r\n          timerCompleted = <div style={{textAlign: 'center'}}>\r\n                             <h1> Timer complete! </h1>\r\n                             <h3> Create another? </h3>\r\n                           </div>;\r\n        }\r\n    \r\n        var body = <div style={{textAlign: 'center'}}>\r\n                     <h1>{this.state.currentMinutes} Minute(s) and {this.state.currentSeconds} Second(s) left!</h1>\r\n                     <h2>Countdown for {this.state.countdownMinutes} minutes and {this.state.countdownSeconds} seconds.</h2>\r\n                   </div>;\r\n        \r\n        if (!this.state.timerActive) {\r\n          body = <div style={{textAlign: 'center'}}>\r\n                   <input type=\"number\" onChange={this.updateMinutes} value={this.state.countdownMinutes}/> &nbsp; Minutes \r\n                   <br />\r\n                   <input type=\"number\" onChange={this.updateSeconds} value={this.state.countdownSeconds}/> &nbsp; Seconds \r\n                   <br />\r\n                   <br />\r\n                   <button onClick={this.startTimer}>Countdown!</button>\r\n                 </div>;\r\n        }\r\n    \r\n        return (\r\n          <div style={{textAlign:\"center\"}}>\r\n            <br />\r\n            <h1>React Tutorial - Timer</h1>\r\n            <br />\r\n            <br />\r\n            {timerCompleted}\r\n            {body}\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Timer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Timer from './Timer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Timer />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}