{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","state","currentMinutes","currentSeconds","countdownMinutes","countdownSeconds","timerActive","timerCompleted","startTimer","bind","assertThisInitialized","countDown","updateMinutes","updateSeconds","minutes","seconds","setState","setInterval","clearInterval","event","target","value","react_default","a","createElement","style","textAlign","body","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7235bc3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props); \n    \n    this.timer = 0; \n    this.state = {\n      currentMinutes: 0, \n      currentSeconds: 0,\n      countdownMinutes: 0,\n      countdownSeconds: 0, \n      timerActive: false, \n      timerCompleted: false\n    }; \n\n    this.startTimer = this.startTimer.bind(this); \n    this.countDown = this.countDown.bind(this);\n    this.updateMinutes = this.updateMinutes.bind(this); \n    this.updateSeconds = this.updateSeconds.bind(this); \n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.timerActive == false && (this.state.countdownMinutes > 0 || this.state.countdownSeconds > 0)) {\n      let minutes = this.state.countdownMinutes; \n      let seconds = this.state.countdownSeconds; \n      this.setState({timerActive: true, currentMinutes: minutes, currentSeconds: seconds, timerCompleted: false}); \n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    var seconds = this.state.currentSeconds - 1;\n    var minutes = this.state.currentMinutes;\n    if (seconds < 0) {\n      seconds = 59; \n      minutes = minutes - 1; \n    }\n    this.setState({currentSeconds: seconds, currentMinutes: minutes});\n    if (seconds <= 0 && minutes <= 0) {\n      clearInterval(this.timer); \n      this.setState({timerActive: false, timerCompleted: true});\n      this.timer = 0; \n    }\n  }\n\n  updateMinutes(event) {\n    this.setState({countdownMinutes: event.target.value});\n  }\n\n  updateSeconds(event) {\n    this.setState({countdownSeconds: event.target.value});\n  }\n\n  render() {\n    var timerCompleted = \"\"; \n    \n    if (this.state.timerCompleted) {\n      timerCompleted = <div style={{textAlign: 'center'}}>\n                         <h1> Timer complete! </h1>\n                         <h3> Create another? </h3>\n                       </div>;\n    }\n\n    var body = <div style={{textAlign: 'center'}}>\n                 <h1>{this.state.currentMinutes} Minute(s) and {this.state.currentSeconds} Second(s) left!</h1>\n                 <h2>Countdown for {this.state.countdownMinutes} minutes and {this.state.countdownSeconds} seconds.</h2>\n               </div>;\n    \n    if (!this.state.timerActive) {\n      body = <div style={{textAlign: 'center'}}>\n               <input type=\"number\" onChange={this.updateMinutes} value={this.state.countdownMinutes}/> &nbsp; Minutes \n               <br />\n               <input type=\"number\" onChange={this.updateSeconds} value={this.state.countdownSeconds}/> &nbsp; Seconds \n               <br />\n               <br />\n               <button onClick={this.startTimer}>Countdown!</button>\n             </div>;\n    }\n\n    return (\n      <div>\n        <br />\n        <h1>React Tutorial - Timer</h1>\n        <br />\n        <br />\n        {timerCompleted}\n        {body}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}